[[configuration-jvm]]
JVM Settings
============

Properly configuring memory utilization of the JVM is crucial for optimal performance. 
As an example, a poorly configured JVM could spend all CPU time performing garbage collection (blocking all threads from performing any work). 
Requirements such as latency, total throughput and available hardware have to be considered to find the right setup. 
In production, Neo4j should run on a multi core/CPU platform with the JVM in server mode.
 
== Configuring heap size and GC ==

A large heap allows for larger node and relationship caches -- which is a good thing -- but large heaps can also lead to latency problems caused by full garbage collection. 
The different high level cache implementations available in Neo4j together with a suitable JVM configuration of heap size and garbage collection (GC) should be able to handle most workloads.

The default cache (soft reference based LRU cache) works best with a heap that never gets full: a graph where the most used nodes and relationships can be cached. 
If the heap gets too full there is a risk that a full GC will be triggered; the larger the heap, the longer it can take to determine what soft references should be cleared. 

Using the strong reference cache means 'all' the nodes and relationships being used must fit in available heap.
Otherwise there is a risk of getting out-of-memory exceptions. 
The soft reference and strong reference caches are well suited for applications were the overal throughput is important.

The weak reference cache basically needs enough heap to handle the peak load of the application -- peak load multiplied by the average memory required per request. 
It is well suited for low latency requirements were GC interuptions are not acceptable.

When running Neo4j on Windows, keep in mind that the memory mapped buffers are allocated on heap by default, so need to be taken into consideration when determining heap size.

.Guidelines for heap size
[format="csv",width="75%",cols="4"]
[frame="topbot",grid="none",options="header"]
|======================================================================================================
Number of primitives,RAM size,Heap configuration,Reserved RAM for the OS
10M,2GB,512MB,the rest
100M,8GB+,1-4GB,1-2GB
1B+,16GB-32GB+,4GB+,1-2GB
|======================================================================================================

The recommended garbage collector to use when running Neo4j in production is the Concurrent Mark and Sweep Compactor turned on by supplying -XX:+UseConcMarkSweepGC as a JVM parameter.

== Standalone Server ==

Tuning the standalone server is achieved by editing the +neo4j-wrapper.conf+ file in the +conf+ directory of +NEO4J_HOME+.

Edit the following properties:

.neo4j-wrapper.conf JVM tuning properties
[options="header", cols="<m,<"]
|====================
| Property Name             | Meaning
| wrapper.java.initmemory   | initial heap size (in MB)
| wrapper.java.maxmemory    | maximum heap size (in MB)
| wrapper.java.additional.N | additional literal JVM parameter, where N is a number for each
|====================

