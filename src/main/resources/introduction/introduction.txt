[preface]
[[introduction]]
Introduction
============

This is the reference manual for Neo4j version {neo4j-version}. 

The main parts of the manual are:

* <<reference-documentation>> 
* <<tutorials>>
* <<tools>>
* <<help>>
* <<manpages>>

The material is practical, technical, and focused on answering specific questions. 
It addresses how things work, what to do and what to avoid to successfully run Neo4j in a production environment. 
After a brief introduction, each topic area assumes general familiarity as it addresses the particular details of Neo4j.
 
The goal is to be thumb-through and rule-of-thumb friendly.

Each section should stand on its own, so you can hop right to whatever interests you.
When possible, the sections distill "rules of thumb" which you can keep in mind whenever you wander out of the house without this manual in your back pocket.

:leveloffset: 1

[[introduction-who]]
== Who should read this ==

The topics should be relevant to architects, administrators, developers and operations personnel.
You should already know about Neo4j and using graphs to store data.
If you are completely new to Neo4j please check out http://neo4j.org first.

[[introduction-highlights]]
== Neo4j highlights ==

As a robust, scalable and high-performance database, Neo4j is suitable for lightweight projects or full enterprise deployment.  

It features:

* true ACID transactions
* high availability
* scales to billions of nodes and relationships
* high speed querying through traversals

Proper ACID behavior is the foundation of data reliability.
Neo4j enforces that all mutating operations occur within a transaction, guaranteeing consistent data.
This robustness extends from single instance embedded graphs to multi-server high availability installations.
For details, see <<transactions>>.

Reliable graph storage can easily be added to any application.
A property graph can scale in size and complexity as the application evolves, with little impact on performance.
Whether starting new development, or augmenting existing functionality, Neo4j is only limited by physical hardware.

A single server instance can handle a graph of billions of nodes and relationships.
When data throughput is insufficient, the graph database can be distributed among multiple servers in a high availability configuration. 
See <<ha>> to learn more. 

The graph database storage shines when storing richly-connected data. 
Querying is performed through traversals, which can perform millions of "joins" per second.



